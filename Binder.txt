Binder [ ES VIEJO, DADO QUE SE HICIERON CAMBIOS Y SE AGREGARON COSAS. PERO SE PRESERVA COMO UN ARCHIVO ]
------
  
Como cualquier otro sistema basado en Unix, los procesos en Android tienen espacio de direcciones separadas y un proceso no puede acceder directamente a la memoria de otro proceso (esto se llama aislación de procesos). Generalmente, esto es una buena característica por razones de estabilidad y seguridad, la modificación de múltiples procesos en la misma área de memoria puede ser catastrófico. Sin embargo, si un proceso quiere ofrecer algún servicio/s útil a otros procesos, necesita proveer algún mecanismo que permita a otros procesos descubrir e interactuar con esos servicios. Este mecanismo es el IPC.
[ANDSECINT]
Hay varias formas de implementar este mecanismo de IPC, entre ellas estan: archivos, señales, sockets, pipes, semáforos, memoria compartida, colas de mensajes, etc. Mientras Android usa alguna de ellas (como los sockets locales), no tiene soporte para otras (los mecanismos IPCs de System V como semáforos, segmentos de memoria compartida y colas de mensajes).
[ANDSECINT]
Dado que el mecanismo IPC original del kernel de Linux (System V IPC) no era suficientemente flexible o confiable, se creó uno nuevo para Android, llamado Binder. Éste se basa en la arquitectura e ideas del proyecto llamado OpenBinder, pero con una nueva implementación. 
[ANDSECINT]
Binder implementa una arquitectura de componentes distribuidos basadas en interfases abstractas. Es similar a COM (Common Object Model) en Windows y a CORBA (Common Object Request Broker Architectures) en Unix, pero a diferencia de estos frameworks, Binder corre sobre un solo dispositivo y no soporta RPC (Remote Procedure Calls) a través de la red.
[ANDSECINT]
Como se mencionó al principio, en un sistema basado en Unix, un proceso no puede acceder a la memoria de otro proceso. Sin embargo, el kernel tiene control sobre todos los procesos y por lo tanto puede exponer una interfase que habilita el mecanismo de IPC en Android. En Binder, esta interfase se encuentra en el dispositivo /dev/binder, el cual es implementado por el driver de Binder en el kernel, es usado para transmitir paquetes de datos entre las partes de la comunicación usando llamadas al sistema "ioctl()"[EMBAND]. Éste es el objecto central del framework y todas las invocaciones IPC pasan por él [ANDSECINT]. Este driver facilita toda la arquitectura de Binder. Binder (como una arquitectura) opera en un modelo cliente-servidor. Binder permite a un proceso invocar métodos en procesos "remotos" sincrónicamente.
[ANDHACK].
En el nivel más alto, donde se desarrollan apps, las abstracciones de IPC como Intents (comandos con datos asociados que se entregan a los componentes a través de procesos), Messengers (los objetos que permiten la comunicación basada en mensajes a través de procesos) y ContentProviders (componentes que exponen una interfase de administración de datos que puede ser usada en múltiples procesos) son construidas por arriba de Binder. Adicionalmente, las interfases de servicios que necesitan ser expuestas a otros procesos pueden ser definidas usando AIDL (Android Interfase Definition Language), el cual permite a los clientes invocar a los servicios remotos como si fuesen objetos Java locales.
[ANDSECINT]
Es decir, AIDL permite que 2 aplicaciones usen un acuerdo o interfases estándar para enviar y recibir datos, manteniendo la interfase separada de la implementación. AIDL es parecido a otros archivos que contienen Lenguajes de Definición de Interfases, o cierta forma es parecido a los archivos headers de C/C++.
[ANDHACK]
